from typing import Any, Callable, Dict, List, Optional, Union

from bson import Code, DBRef, SON
from bson.codec_options import CodecOptions, DEFAULT_CODEC_OPTIONS
from pymongo import MongoClient, common
from pymongo.collection import Collection
from pymongo.command_cursor import CommandCursor
from pymongo.pool import SocketInfo
from pymongo.read_concern import ReadConcern
from pymongo.read_preferences import _ServerMode, ReadPreference
from pymongo.son_manipulator import SONManipulator
from pymongo.write_concern import WriteConcern


def _check_name(name: str) -> None: ...
class Database(common.BaseObject):
    def __init__(self, client: MongoClient, name: str,
                 codec_options: Optional[CodecOptions] = None,
                 read_preference: Optional[_ServerMode] = None,
                 write_concern: Optional[WriteConcern] = None,
                 read_concern: Optional[ReadConcern] = None) -> None: ...
    def add_son_manipulator(self, manipulator: SONManipulator): ...
    @property
    def system_js(self) -> 'SystemJS': ...
    @property
    def client(self) -> MongoClient: ...
    @property
    def name(self) -> str: ...
    @property
    def incoming_manipulators(self) -> List[str]: ...
    @property
    def incoming_copying_manipulators(self) -> List[str]: ...
    @property
    def outgoing_manipulators(self) -> List[str]: ...
    @property
    def outgoing_copying_manipulators(self) -> List[str]: ...
    def __eq__(self, other: Any) -> bool: ...
    def __ne__(self, other: Any) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> Collection: ...
    def __getitem__(self, name: str) -> Collection: ...
    def get_collection(self, name: str,
                       codec_options: Optional[CodecOptions] = None,
                       read_preference: Optional[_ServerMode] = None,
                       write_concern: Optional[WriteConcern] = None,
                       read_concern: Optional[ReadConcern] = None)\
        -> Collection: ...
    def _collection_default_options(self, name: str, **kargs: Any)\
        -> Collection: ...
    def create_collection(self, name: str,
                          codec_options: Optional[CodecOptions] = None,
                          read_preference: Optional[_ServerMode] = None,
                          write_concern: Optional[WriteConcern] = None,
                          read_concern: Optional[ReadConcern] = None,
                          **kwargs: Any) -> Collection: ...
    def _apply_incoming_manipulators(self, son: SON, collection: Collection)\
        -> SON: ...
    def _apply_incoming_copying_manipulators(
        self, son: SON, collection: Collection) -> SON: ...
    def _fix_incoming(self, son: SON, collection: Collection) -> SON: ...
    def _fix_outgoing(self, son: SON, collection: Collection) -> SON: ...
    def _command(self, sock_info: SocketInfo, command: Union[str, SON],
                 slave_ok: bool = False, value: int = 1, check: bool = True,
                 allowable_errors: Optional[List[str]] = None,
                 read_preference: _ServerMode = ReadPreference.PRIMARY,
                 codec_options: CodecOptions = DEFAULT_CODEC_OPTIONS,
                 write_concern: Optional[WriteConcern] = None,
                 parse_write_concern_error: bool = False, **kwargs: Any)\
        -> Any: ...
    def command(self, command: Union[str, Dict[str, Any]], value: int = 1,
                check: bool = True,
                allowable_errors: Optional[List[str]] = None,
                read_preference: _ServerMode = ReadPreference.PRIMARY,
                codec_options: CodecOptions = DEFAULT_CODEC_OPTIONS,
                **kwargs: Any) -> Any: ...
    def _list_collections(self, sock_info: SocketInfo, slave_okay: bool,
                          criteria: Dict[str, Any] = None)\
        -> CommandCursor: ...
    def collection_names(self, include_system_collections: bool = True)\
        -> List[str]: ...
    def drop_collection(self, name_or_collection: Union[str, Collection])\
        -> Dict[str, Any]: ...
    def validate_collection(self, name_or_collection: Union[str, Collection],
                            scandata: bool = False, full: bool = False)\
        -> Dict[str, Any]: ...
    def current_op(self, include_all: bool = False) -> Dict[str, Any]: ...
    def profiling_level(self) -> int: ...
    def set_profiling_level(self, level: int, slow_ms: Optional[int] = None)\
        -> None: ...
    def profiling_info(self) -> List[Any]: ...
    def error(self) -> Any: ...
    def last_status(self) -> Any: ...
    def previous_error(self) -> Any: ...
    def reset_error_history(self) -> None: ...
    def __iter__(self) -> 'Database': ...
    def __next__(self) -> None: ...
    def _default_role(self, read_only: bool) -> str: ...
    def _create_or_update_user(
        self, create: bool, name: str, password: str, read_only: bool,
        **kwargs: Any) -> None: ...
    def _legacy_add_user(self, name: str, password: str, read_only: bool,
        **kwargs: Any) -> None: ...
    def add_user(self, name: str, password: Optional[str] = None,
                 read_only: Optional[bool] = None, **kwargs: Any) -> None: ...
    def remove_user(self, name: str) -> None: ...
    def authenticate(self, name: Optional[str] = None,
                     password: Optional[str] = None,
                     source: Optional[str] = None, mechanism: str = 'DEFAULT',
                     **kwargs: Any) -> bool: ...
    def logout(self) -> None: ...
    def dereference(self, dbref: DBRef, **kwargs: Any) -> Dict[str, Any]: ...
    def eval(self, code: Union[Code, str], *args: Any) -> Any: ...
    def __call__(self, *args: Any, **kwargs: Any): ...
class SystemJS(object):
    def __init__(self, database: Database) -> None: ...
    def __setattr__(self, name: str, code: str) -> None: ...
    def __setitem__(self, name: str, code: str) -> None: ...
    def __delattr__(self, name: str) -> None: ...
    def __delitem__(self, name: str) -> None: ...
    def __getattr__(self, name: str) -> Callable[..., Any]: ...
    def __getitem__(self, name: str) -> Callable[..., Any]: ...
    def list(self) -> List[str]: ...
