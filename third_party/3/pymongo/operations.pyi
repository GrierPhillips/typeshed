from typing import Any, Dict, Mapping, Optional, Sequence, Tuple, Union

from pymongo.bulk import _Bulk
from pymongo.common import validate_boolean, validate_is_mapping
from pymongo.collation import validate_collation_or_none
from pymongo.helpers import _gen_index_name, _index_document, _index_list


class _WriteOp(object):
    """Private base class for all write operations."""

    __slots__ = ("_filter", "_doc", "_upsert")

    def __init__(self, filter: Optional[Mapping[str, Any]] = None,
                 doc: Optional[Mapping[str, Any]] = None,
                 upsert: Optional[bool] = None) -> None: ...
    def __eq__(self, other: Any) -> bool: ...
    def __ne__(self, other: Any) -> bool: ...
class InsertOne(_WriteOp):
    def __init__(self, document: Mapping[str, Any]) -> None: ...
    def _add_to_bulk(self, bulkobj: _Bulk) -> None: ...
    def __repr__(self) -> str: ...
class DeleteOne(_WriteOp):
    def __init__(self, filter: Mapping[str, Any]) -> None: ...
    def _add_to_bulk(self, bulkobj: _Bulk) -> None: ...
    def __repr__(self) -> str: ...
class DeleteMany(_WriteOp):
    def __init__(self, filter: Mapping[str, Any]) -> None: ...
    def _add_to_bulk(self, bulkobj: _Bulk) -> None: ...
    def __repr__(self) -> str: ...
class ReplaceOne(_WriteOp):
    def __init__(self, filter: Mapping[str, Any],
                 replacement: Mapping[str, Any], upsert: bool = False)\
        -> None: ...
    def _add_to_bulk(self, bulkobj: _Bulk) -> None: ...
    def __repr__(self) -> str: ...
class UpdateOne(_WriteOp):
    def __init__(self, filter: Mapping[str, Any],
                 update: Mapping[str, Any], upsert: bool = False) -> None: ...
    def _add_to_bulk(self, bulkobj: _Bulk) -> None: ...
    def __repr__(self) -> None: ...
class UpdateMany(_WriteOp):
    def __init__(self, filter: Mapping[str, Any],
                 update: Mapping[str, Any], upsert: bool = False) -> None: ...
    def _add_to_bulk(self, bulkobj: _Bulk) -> None: ...
    def __repr__(self) -> None: ...
class IndexModel(object):
    def __init__(self, keys: Union[str, Sequence[Tuple[str, Union[int, str]]]],
                 **kwargs: Any) -> None: ...
    @property
    def document(self) -> Dict[str, Any]: ...
