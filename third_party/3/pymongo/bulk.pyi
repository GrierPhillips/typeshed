from typing import Any, Dict, Iterator, List, Optional, Tuple, Union

from pymongo import pool
from pymongo.collation import Collation
from pymongo.collection import Collection
from pymongo.write_concern import WriteConcern


_DELETE_ALL: int = 0
_DELETE_ONE: int = 1

# For backwards compatibility. See MongoDB src/mongo/base/error_codes.err
_BAD_VALUE: int = 2
_UNKNOWN_ERROR: int = 8
_WRITE_CONCERN_ERROR: int = 64

_COMMANDS: Tuple[str, ...] = ('insert', 'update', 'delete')


# These string literals are used when we create fake server return
# documents client side. We use unicode literals in python 2.x to
# match the actual return values from the server.
_UID: str = u"_id"
_UCODE: str = u"code"
_UERRMSG: str = u"errmsg"
_UINDEX: str = u"index"
_UOP: str = u"op"


class _Run(object):
    def __init__(self, op_type: int) -> None: ...
    def index(self, idx: int) -> int: ...
    def add(self, original_index: int, operation: Dict[str, Any])\
        -> None: ...
def _make_error(index: int, code: int, errmsg: str,
                operation: Dict[str, Any]) -> Dict[str, Any]: ...
def _merge_legacy(run: _Run, full_result: Dict[str, Any],
                  result: Dict[str, Any], index: int) -> None: ...
def _merge_command(run: _Run, full_result: Dict[str, Any],
                   results: List[Tuple[int, Dict[str, Any]]]) -> None: ...
class _Bulk(object):
    """The private guts of the bulk write API.
    """
    def __init__(self, collection: Collection, ordered: bool,
                 bypass_document_validation: bool) -> None: ...
    def add_insert(self, document: Dict[str, Any]) -> None: ...
    def add_update(self, selector: Dict[str, Any],
                   update: Dict[str, Any], multi: bool = False,
                   upsert: bool = False,
                   collation: Optional[Collation] = None) -> None: ...
    def add_replace(self, selector: Dict[str, Any],
                    replacement: Dict[str, Any], upsert: bool = False,
                    collation: Optional[Collation] = None) -> None: ...
    def add_delete(self, selector: Dict[str, Any], limit: int,
                   collation: Optional[Collation] = None) -> None: ...
    def gen_ordered(self) -> _Run: ...
    def gen_unordered(self) -> _Run: ...
    def execute_command(self, sock_info: pool.SocketInfo,
                        generator: Iterator[_Run],
                        write_concern: WriteConcern) -> Dict[str, Any]: ...
    def execute_no_results(self, sock_info: pool.SocketInfo,
                           generator: Iterator[_Run]) -> None: ...
    def execute_legacy(self, sock_info: pool.SocketInfo,
                       generator: Iterator[_Run],
                       write_concern: WriteConcern) -> None: ...
    def execute(self, write_concern: WriteConcern)\
            -> Union[Dict[str, Any], None]: ...
class BulkUpsertOperation(object):
    def __init__(self, selector: Dict[str, Any], bulk: _Bulk,
                 collation: Collation) -> None: ...
    def update_one(self, update: Dict[str, Any]) -> None: ...
    def update(self, update: Dict[str, Any]) -> None: ...
    def replace_one(self, replacement: Dict[str, Any]) -> None: ...
class BulkWriteOperation(object):
    def __init__(self, selector: Dict[str, Any], bulk: _Bulk,
                 collation: Collation) -> None: ...
    def update_one(self, update: Dict[str, Any]) -> None: ...
    def update(self, update: Dict[str, Any]) -> None: ...
    def replace_one(self, replacement: Dict[str, Any]) -> None: ...
    def remove_one(self) -> None: ...
    def remove(self) -> None: ...
    def upsert(self) -> BulkUpsertOperation: ...
class BulkOperationBuilder(object):
    def __init__(self, collection: Collection, ordered: bool = True,
                 bypass_document_validation: bool = False) -> None: ...
    def find(self, selector: Dict[str, Any],
             collation: Optional[Collation] = None) -> BulkWriteOperation: ...
    def insert(self, document: Dict[str, Any]) -> None: ...
    def execute(self, write_concern: Optional[WriteConcern] = None)\
        -> Union[Dict[str, Any], None]: ...
