from typing import (Any, Callable, Dict, FrozenSet, List, Optional,
                    Set, Tuple, Type, Union)

from bson import CodecOptions
from pymongo import (client_session, command_cursor, common)
from pymongo.auth import MongoCredential
from pymongo.cursor_manager import CursorManager
from pymongo.database import Database
from pymongo.message import _CursorAddress, _GetMore, _Query
from pymongo.monitoring import _EventListeners
from pymongo.pool import SocketInfo
from pymongo.topology import Topology
from pymongo.write_concern import WriteConcern
from pymongo.read_concern import ReadConcern
from pymongo.read_preferences import _ServerMode
from pymongo.response import Response
from pymongo.server import Server

class MongoClient(common.BaseObject):
    HOST: str = "localhost"
    PORT: int = 27017
    def __init__(self, host: str = None, port: int = None,
                 document_class: Type[Any] = dict,
                 tz_aware: Optional[bool] = None,
                 connect: Optional[bool] = None, **kwargs: Any) -> None: ...
    def _cache_credentials(self, source: str, credentials: MongoCredential,
                           connect: bool = False) -> None: ...
    def _purge_credentials(self, source: str) -> None: ...
    def _cached(self, dbname: str, coll: str, index: Union[str, int]) -> bool: ...
    def _cache_index(self, dbname: str, collection: str,
                     index: Union[str, int], cache_for: int) -> None: ...
    def _purge_index(self, database_name: str,
                     collection_name: Optional[str] = None,
                     index_name: Optional[str] = None) -> None: ...
    def _server_property(self, attr_name: str) -> Any: ...
    @property
    def event_listeners(self) -> _EventListeners: ...
    @property
    def address(self) -> Union[Tuple[str, int], None]: ...
    @property
    def primary(self) -> Union[Tuple[str, int], None]: ...
    @property
    def secondaries(self) -> Union[Set[str], Set[Tuple[str, int]]]: ...
    @property
    def arbiters(self) -> Union[Set[str], Set[Tuple[str, int]]]: ...
    @property
    def is_primary(self) -> bool: ...
    @property
    def is_mongos(self) -> bool: ...
    @property
    def max_pool_size(self) -> int: ...
    @property
    def min_pool_size(self) -> int: ...
    @property
    def max_idle_time_ms(self) -> int: ...
    @property
    def nodes(self) -> FrozenSet[Tuple[str, int]]: ...
    @property
    def max_bson_size(self) -> int: ...
    @property
    def max_message_size(self) -> int: ...
    @property
    def max_write_batch_size(self) -> int: ...
    @property
    def local_threshold_ms(self) -> int: ...
    @property
    def server_selection_timeout(self) -> int: ...
    @property
    def _is_writable(self) -> bool: ...
    def close(self) -> None: ...
    def set_cursor_manager(self, manager_class: CursorManager) -> None: ...
    def _get_topology(self) -> Topology: ...
    def _get_socket(self, selector: Callable[[List[Server]], List[Server]])\
        -> None: ...
    def _socket_for_writes(self) -> SocketInfo: ...
    def _socket_for_reads(self, read_preference: _ServerMode)\
        -> Tuple[SocketInfo, bool]: ...
    def _send_message_with_response(
        self,
        operation: Union[_Query, _GetMore],
        read_preference: Optional[_ServerMode] = None,
        exhaust: bool = False,
        address: Optional[Tuple[str, int]] = None) -> Response: ...
    def _reset_on_error(self, server: Server,
                        func: Callable[[Any], Any], *args: Any,
                        **kwargs: Any) -> Any: ...
    def __reset_server(self, address: Tuple[str, int]) -> None: ...
    def _reset_server_and_request_check(self,
                                        address: Tuple[str, int]) -> None: ...
    def __eq__(self, other: Any) -> bool: ...
    def __ne__(self, other: Any) -> bool: ...
    def _repr_helper(self) -> str: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> Database: ...
    def __getitem__(self, name: str) -> Database: ...
    def close_cursor(self, cursor_id: int,
                     address: Optional[Tuple[str, int]] = None) -> None: ...
    def _close_cursor_now(self, cursor_id: int,
                          address: Optional[Tuple[str, int]] = None)\
        -> None: ...
    def kill_cursors(self, cursor_ids: List[int],
                     address: Optional[Tuple[str, int]] = None) -> None: ...
    def _kill_cursors(
        self,
        cursor_ids: List[int],
        address: Union[Tuple[str, int], _CursorAddress],
        topology: Topology) -> None: ...
    def _process_periodic_tasks(self) -> None: ...
    def server_info(self) -> Dict[str, Any]: ...
    def database_names(self) -> List[str]: ...
    def drop_database(self, name_or_database: Union[str, Database])\
        -> None: ...
    def get_default_database(self) -> Database: ...
    def get_database(
        self,
        name: Optional[str] = None,
        codec_options: Optional[CodecOptions] = None,
        read_preference: Optional[_ServerMode] = None,
        write_concern: Optional[WriteConcern] = None,
        read_concern: Optional[ReadConcern] = None)\
        -> Database: ...
    def _database_default_options(self, name: str) -> Database: ...
    @property
    def is_locked(self) -> bool: ...
    def fsync(self, **kwargs: Union[bool, client_session.ClientSession])\
        -> Dict[str, Any]: ...
    def unlock(
        self,
        session: Optional[client_session.ClientSession] = None) -> None: ...
    def __enter__(self) -> 'MongoClient': ...
    def __exit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -> None: ...
    def __iter__(self) -> 'MongoClient': ...
    def __next__(self) -> None: ...
